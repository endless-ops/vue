Webpack 入门教程：http://www.runoob.com/w3cnote/webpack-tutorial.html

官方文档：http://vuejs.org/v2/guide/syntax.html

中文文档: https://cn.vuejs.org/v2/guide/syntax.html


1.什么是Vue
     Vue 是一个用于构建用户界面的渐进式的 JavaScript 框架。它建立在标准 HTML、CSS 和 JavaScript 之上，并提供了一个声明性和基于组件的编程模型，可帮助您有效地开发简单或复杂的用户界面。

2.安装方式
    2.1 使用 <script>标签引入
    2.2 使用CDN方法， 同样使用 <script>标签引入
        （
            Staticfile CDN（国内）：https://cdn.staticfile.org/vue/2.2.2/vue.min.js
            unpkg：https://cdn.staticfile.org/vue/2.7.0/vue.min.js
            cdnjs：https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js
        ）
    2.3 NPM方法
        命令行工具
            # 全局安装 vue-cli
            $ cnpm install --global vue-cli
            # 创建一个基于 webpack 模板的新项目
            $ vue init webpack my-project
            # 这里需要进行一些配置，默认回车即可
            This will install Vue 2.x version of the template.

            For Vue 1.x use: vue init webpack#1.0 my-project

            ? Project name my-project
            ? Project description A Vue.js project
            ? Author runoob <test@runoob.com>
            ? Vue build standalone
            ? Use ESLint to lint your code? Yes
            ? Pick an ESLint preset Standard
            ? Setup unit tests with Karma + Mocha? Yes
            ? Setup e2e tests with Nightwatch? Yes

               vue-cli · Generated "my-project".

               To get started:

                 cd my-project
                 npm install
                 npm run dev

               Documentation can be found at https://vuejs-templates.github.io/webpack
            进入项目，安装并运行：

            $ cd my-project
            $ cnpm install
            $ cnpm run dev
             DONE  Compiled successfully in 4388ms

            > Listening at http://localhost:8080

        Vue 项目打包
            npm run build

            执行完成后，会在 Vue 项目下生成一个 dist 目录，一般包含 index.html 文件及 static 目录，static 目录包含了静态文件 js、css 以及图片目录 images。

            如果直接双击 index.html 打开浏览器，页面可能是空白了，想要正常显示，可以修改 index.html 文件中 js、css 文件的路径。

            例如我们打开 dist/index.html 文件看到路径是绝对路径：

            <link href=/static/css/app.33da80d69744798940b135da93bc7b98.css rel=stylesheet>
            <script type=text/javascript src=/static/js/app.717bb358ddc19e181140.js></script>
            我们把 js、css 路径修改为相对路径：

            <link href=static/css/app.33da80d69744798940b135da93bc7b98.css rel=stylesheet>
            <script type=text/javascript src=static/js/app.717bb358ddc19e181140.js></script>
            这样直接双击 dist/index.html 文件就可以在浏览器中看到效果了。

3.Vue.js 目录结构
    目录解析
    目录/文件	                说明
    build	                    项目构建(webpack)相关代码
    config	                    配置目录，包括端口号等。我们初学可以使用默认的。
    node_modules	            npm 加载的项目依赖模块
    src                         这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：
                                assets: 放置一些图片，如logo等。
                                components: 目录里面放了一个组件文件，可以不用。
                                App.vue: 项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录。
                                main.js: 项目的核心文件。
    static	                    静态资源目录，如图片、字体等。
    test	                    初始测试目录，可删除
    .xxxx文件	                这些是一些配置文件，包括语法配置，git配置等。
    index.html	                首页入口文件，你可以添加一些 meta 信息或统计代码啥的。
    package.json	            项目配置文件。
    README.md	                项目的说明文档，markdown 格式


4.vue.js起步
    代码:
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
        <script type="text/javascript" src="https://cdn.staticfile.org/vue/2.7.0/vue.min.js" ></script>
    </head>
    <body>

        <div id="app">
            <!-- 属性使用方法 -->
            <p>{{message}}</p>
            <!-- 函数使用方式 -->
            <p>{{details()}}</p>

        </div>
        <script>
            new Vue({
                el:"#app",
                // 属性
                data:{
                    message:"Hello Vue"
                },
                // 行为
                methods: {
                    details: function () {
                        return  this.message + "学的不仅是技术，更是梦想";
                    }
                }

            });
        </script>
    </body>
    </html>



    代码：
        <div id = "vue_det">
            <h1>site : {{site}}</h1>
            <h1>url : {{url}}</h1>
            <h1>{{details()}}</h1>
        </div>
        <script type="text/javascript">
            var vm = new Vue({
                el: '#vue_det',
                data: {
                    site: "菜鸟教程",
                    url: "www.runoob.com",
                    alexa: "10000"
                },
                methods: {
                    details: function() {
                        return  this.site + " - 学的不仅是技术，更是梦想！";
                    }
                }
            })
        </script>

    在 Vue 构造器中有一个el 参数，它是 DOM 元素中的 id
    接下来的改动全部在以上指定的 div 内，div 外部不受影响。

    接下来我们看看如何定义数据对象。

    data 用于定义属性，实例中有三个属性分别为：site、url、alexa。

    methods 用于定义的函数，可以通过 return 来返回函数值。

    {{ }} 用于输出对象属性和函数返回值。

    当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。






    除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来  vm.$data\vm.$el


5.Vue.js 模板语法
    Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。

    Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。

    结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。


    插值
        文本
            数据绑定最常见的形式就是使用{{...}}的文本插值


        html
            使用 v-html 指令用于输出 html 代码
            实例：
                <div v-html="message"></div>

        属性
            html属性中的值应使用 v-bind 指令
            实例：
                <!DOCTYPE html>
                <html>
                <head>
                <meta charset="utf-8">
                <title>Vue 测试实例 - 菜鸟教程(runoob.com)</title>
                </head>
                <style>
                    .class1{
                        background: #444;
                        color: #eee;
                    }
                </style>
                <body>
                    <script src="https://cdn.staticfile.org/vue/2.2.2/vue.min.js"></script>

                    <div id="app">
                        <label for="r1">修改颜色</label><input type="checkbox" v-model="use" id="r1">
                        <br><br>
                        <div v-bind:class="{'class1': use}">
                            v-bind:class 指令
                        </div>
                    </div>

                    <script>
                        new Vue({
                            el: '#app',
                            data:{
                                use: false
                            }
                        });
                    </script>
                </body>
                </html>

        表达式
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <title>Title</title>
                <script type="text/javascript" src="https://cdn.staticfile.org/vue/2.7.0/vue.min.js" ></script>
            </head>
            <body>

                <div id="app">
                    <!-- 属性使用方法 -->
                    <p>{{5 + 5}}</p>
                    <p>{{ok ? 'YES' : 'NO'}}</p>
                    <p>{{message.split('').reverse().join('')}}</p>
                    <div v-bind:id="'list-' + id">菜鸟教程</div>
                </div>
                <script>
                    new Vue({
                        el:"#app",
                        // 属性
                        data: {
                            ok : true,
                            message : 'RUNOOB',
                            id : 1
                        },
                    });
                </script>
            </body>
            </html>


        指令
            指令是带有 v- 前缀的特殊属性。

            指令用于在表达式的值改变时，将某些行为应用到 DOM 上

            实例：
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>Title</title>
                    <script type="text/javascript" src="https://cdn.staticfile.org/vue/2.7.0/vue.min.js" ></script>
                </head>
                <body>

                    <div id="app">
                        <!-- 属性使用方法 -->
                        <p v-if="ok">可以吗</p>
                    </div>
                    <script>
                        new Vue({
                            el:"#app",
                            // 属性
                            data: {
                                ok : true
                            },
                        });
                    </script>
                </body>
                </html>

        参数
            参数在指令后以冒号指明

            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <title>Title</title>
                <script type="text/javascript" src="https://cdn.staticfile.org/vue/2.7.0/vue.min.js" ></script>
            </head>
            <body>

                <div id="app">
                    <!-- 属性使用方法 -->
                    <a v-bind:href="url">可以吗</a>
                </div>
                <script>
                    new Vue({
                        el:"#app",
                        // 属性
                        data: {
                            url : 'www.baidu.com'
                        },
                    });
                </script>
            </body>
            </html>

            在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。

            另一个例子是 v-on 指令，它用于监听 DOM 事件,在这里参数是监听的事件名



        用户输入
            在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定

            v-model 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。

            按钮的事件我们可以使用 v-on 监听事件，并对用户的输入进行响应

            实例：
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>Title</title>
                    <script type="text/javascript" src="https://cdn.staticfile.org/vue/2.7.0/vue.min.js"></script>
                </head>
                <body>

                <div id="app">
                    <p>{{ message }}</p>
                    <button v-on:click="reverseMessage">反转字符串</button>
                </div>

                <script>
                    new Vue({
                        el: '#app',
                        data: {
                            message: 'Runoob!'
                        },
                        methods: {
                            reverseMessage: function () {
                                this.message = this.message.split('').reverse().join('')
                            }
                        }
                    })
                </script>
                </body>
                </html>


        过滤器
            Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由"管道符"指示, 过滤器函数接受表达式的值作为第一个参数。

            实例：
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>Title</title>
                    <script type="text/javascript" src="https://cdn.staticfile.org/vue/2.7.0/vue.min.js"></script>
                </head>
                <body>

                <div id="app">
                    {{ message | capitalize }}
                </div>

                <script>
                    new Vue({
                        el: '#app',
                        data: {
                            message: 'runoob'
                        },
                        filters: {
                            capitalize: function (value) {
                                if (!value) return ''
                                value = value.toString()
                                return value.charAt(0).toUpperCase() + value.slice(1)
                            }
                        }
                    })
                </script>
                </body>
                </html>


            {{ message | filterA | filterB }}
            过滤器是 JavaScript 函数，因此可以接受参数：

            {{ message | filterA('arg1', arg2) }}

            这里，message 是第一个参数，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。

        缩写
            v-bind 缩写
                Vue.js 为两个最为常用的指令提供了特别的缩写：

                <!-- 完整语法 -->
                <a v-bind:href="url"></a>
                <!-- 缩写 -->
                <a :href="url"></a>

            v-on 缩写
                <!-- 完整语法 -->
                <a v-on:click="doSomething"></a>
                <!-- 缩写 -->
                <a @click="doSomething"></a>





6.Vue.js 条件语句
    条件判断
        v-if

            条件判断使用 v-if指令
            实例：
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>Title</title>
                    <script type="text/javascript" src="https://cdn.staticfile.org/vue/2.7.0/vue.min.js"></script>
                </head>
                <body>

                <div id="app">
                    <p v-if="seen">现在你看到我了</p>
                    <template v-if="ok">
                        <h1>菜鸟教程</h1>
                        <p>学的不仅是技术，更是梦想！</p>
                        <p>哈哈哈，打字辛苦啊！！！</p>
                    </template>
                </div>

                <script>
                    new Vue({
                        el: '#app',
                        data: {
                            seen: true,
                            ok: true
                        }
                    })
                </script>
                </body>
                </html>


            在字符串模板中，如 Handlebars ，我们得像这样写一个条件块：

            <!-- Handlebars 模板 -->
            {{#if ok}}
              <h1>Yes</h1>
            {{/if}}


        v-else
            可以用 v-else 指令给 v-if 添加一个 "else" 块

            实例：
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>Title</title>
                    <script type="text/javascript" src="https://cdn.staticfile.org/vue/2.7.0/vue.min.js"></script>
                </head>
                <body>

                <div id="app">
                    <p v-if="seen">现在你看到我了</p>
                    <template v-if="ok">
                        <h1>菜鸟教程</h1>
                        <p>学的不仅是技术，更是梦想！</p>
                        <p>哈哈哈，打字辛苦啊！！！</p>
                    </template>

                    <template v-else="els">
                        <h1>我了个去</h1>
                        <p>学的不仅是技术，更是梦想！</p>
                        <p>哈哈哈，打字辛苦啊！！！</p>
                    </template>


                </div>

                <script>
                    new Vue({
                        el: '#app',
                        data: {
                            seen: true,
                            ok: false,
                            els: true
                        }
                    })
                </script>
                </body>
                </html>

        v-else-if
            v-else-if 在 2.1.0 新增，顾名思义，用作 v-if 的 else-if 块。可以链式的多次使用。v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。

        v-show
            我们也可以使用 v-show 指令来根据条件展示元素。




7.Vue.js 循环语句
    循环使用 v-for 指令。

        v-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。

        实例：
            <div id="app">
              <ol>
                <li v-for="site in sites">
                  {{ site.name }}
                </li>
              </ol>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                sites: [
                  { name: 'Runoob' },
                  { name: 'Google' },
                  { name: 'Taobao' }
                ]
              }
            })
            </script>

        模板中使用 v-for：
        实例：
            <ul>
              <template v-for="site in sites">
                <li>{{ site.name }}</li>
                <li>--------------</li>
              </template>
            </ul>


    v-for 迭代对象
        v-for 可以通过一个对象的属性来迭代数据

        实例：
        <div id="app">
          <ul>
            <li v-for="value in object">
            {{ value }}
            </li>
          </ul>
        </div>

        <script>
        new Vue({
          el: '#app',
          data: {
            object: {
              name: '菜鸟教程',
              url: 'http://www.runoob.com',
              slogan: '学的不仅是技术，更是梦想！'
            }
          }
        })
        </script>


        你也可以提供第二个的参数为键名：
        实例：
            <div id="app">
              <ul>
                <li v-for="(value, key) in object">
                {{ key }} : {{ value }}
                </li>
              </ul>
            </div>

        第三个参数为索引：
        实例：
            <div id="app">
              <ul>
                <li v-for="(value, key, index) in object">
                 {{ index }}. {{ key }} : {{ value }}
                </li>
              </ul>
            </div>

    v-for 迭代整数
        v-for 也可以循环整数
        实例：
        <div id="app">
          <ul>
            <li v-for="n in 10">
             {{ n }}
            </li>
          </ul>
        </div>



 8.Vue.js 计算属性
    计算属性关键词: computed。

    计算属性在处理一些复杂逻辑时是很有用的。

    实例：
        <div id="app">
          <p>原始字符串: {{ message }}</p>
          <p>计算后反转字符串: {{ reversedMessage }}</p>
        </div>

        <script>
        var vm = new Vue({
          el: '#app',
          data: {
            message: 'Runoob!'
          },
          computed: {
            // 计算属性的 getter
            reversedMessage: function () {
              // `this` 指向 vm 实例
              return this.message.split('').reverse().join('')
            }
          }
        })
        </script>

    computed vs methods
        我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。

        可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。

    computed setter
        computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：

        实例：
            <div id="app">
              <p>{{ site }}</p>
            </div>

            <script>
            var vm = new Vue({
              el: '#app',
              data: {
            	name: 'Google',
            	url: 'http://www.google.com'
              },
              computed: {
                site: {
                  // getter
                  get: function () {
                    return this.name + ' ' + this.url
                  },
                  // setter
                  set: function (newValue) {
                    var names = newValue.split(' ')
                    this.name = names[0]
                    this.url = names[names.length - 1]
                  }
                }
              }
            })
            // 调用 setter， vm.name 和 vm.url 也会被对应更新
            vm.site = '菜鸟教程 http://www.runoob.com';
            document.write('name: ' + vm.name);
            document.write('<br>');
            document.write('url: ' + vm.url);
            </script>


 9.Vue.js 监听属性
    Vue.js 监听属性 watch，我们可以通过 watch 来响应数据的变化

    实例：
        <div id = "app">
            <p style = "font-size:25px;">计数器: {{ counter }}</p>
            <button @click = "counter++" style = "font-size:25px;">点我</button>
        </div>
        <script type = "text/javascript">
        var vm = new Vue({
            el: '#app',
            data: {
                counter: 1
            }
        });
        vm.$watch('counter', function(nval, oval) {
            alert('计数器值的变化 :' + oval + ' 变为 ' + nval + '!');
        });
        </script>

    实例：
        <div id = "computed_props">
             千米 : <input type = "text" v-model = "kilometers">
             米 : <input type = "text" v-model = "meters">
          </div>
           <p id="info"></p>
          <script type = "text/javascript">
             var vm = new Vue({
                el: '#computed_props',
                data: {
                   kilometers : 0,
                   meters:0
                },
                methods: {

                },
                computed :{
                },
                watch : {
                   kilometers:function(val) {
                      this.kilometers = val;
                      this.meters = this.kilometers * 1000
                   },
                   meters : function (val) {
                      this.kilometers = val/ 1000;
                      this.meters = val;
                   }
                }
             });
             // $watch 是一个实例方法
            vm.$watch('kilometers', function (newValue, oldValue) {
                // 这个回调将在 vm.kilometers 改变后调用
                document.getElementById ("info").innerHTML = "修改前值为: " + oldValue + "，修改后值为: " + newValue;
            })
          </script>



 10.Vue.js 样式绑定
    Vue.js class
        class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。
        Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组

    Class 属性绑定
        实例：
            <style>
            .active {
            	width: 100px;
            	height: 100px;
            	background: green;
            }
            </style>
            </head>
            <body>
            <div id="app">
              <div v-bind:class="{ 'active': isActive }"></div>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                isActive: true
              }
            })
            </script>
        我们也可以在对象中传入更多属性用来动态切换多个 class
        实例：
            <style>
            .active {
            	width: 100px;
            	height: 100px;
            	background: green;
            }
            .text-danger {
            	background: red;
            }
            </style>
            </head>
            <body>
            <div id="app">
              <div class="static"
                 v-bind:class="{ 'active': isActive, 'text-danger': hasError }">
              </div>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                isActive: true,
            	hasError: true
              }
            })
            </script>


        实例：
            <style>
            .active {
            	width: 100px;
            	height: 100px;
            	background: green;
            }
            .text-danger {
            	background: red;
            }
            </style>
            </head>
            <body>
            <div id="app">
              <div v-bind:class="classObject"></div>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                classObject: {
                  active: true,
                  'text-danger': true
                }
              }
            })
            </script>

        数组语法
            <style>
            .active {
                width: 100px;
                height: 100px;
                background: green;
            }
            .text-danger {
                background: red;
            }
            </style>
            </head>
            <body>
            <div id="app">
                <div v-bind:class="[activeClass, errorClass]"></div>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                activeClass: 'active',
                errorClass: 'text-danger'
              }
            })
            </script>


    Vue.js style(内联样式)
        实例：
            <div id="app">
            	<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }">菜鸟教程</div>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                activeColor: 'green',
            	fontSize: 30
              }
            })
            </script>


        直接绑定到一个样式对象
        实例：
            <div id="app">
              <div v-bind:style="styleObject">菜鸟教程</div>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                styleObject: {
                  color: 'green',
                  fontSize: '30px'
                }
              }
            })
            </script>


        v-bind:style 可以使用数组将多个样式对象应用到一个元素上
        实例：
            <div id="app">
              <div v-bind:style="[baseStyles, overridingStyles]">菜鸟教程</div>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                baseStyles: {
                  color: 'green',
                  fontSize: '30px'
                },
            	overridingStyles: {
                  'font-weight': 'bold'
                }
              }
            })
            </script>




 11.Vue.js 事件处理器
    事件监听可以使用 v-on 指令：
        实例：
            <div id="app">
              <button v-on:click="counter += 1">增加 1</button>
              <p>这个按钮被点击了 {{ counter }} 次。</p>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                counter: 0
              }
            })
            </script>

    我们需要使用一个方法来调用 JavaScript 方法。

    v-on 可以接收一个定义的方法来调用。
        实例：
            <div id="app">
               <!-- `greet` 是在下面定义的方法名 -->
              <button v-on:click="greet">Greet</button>
            </div>

            <script>
            var app = new Vue({
              el: '#app',
              data: {
                name: 'Vue.js'
              },
              // 在 `methods` 对象中定义方法
              methods: {
                greet: function (event) {
                  // `this` 在方法里指当前 Vue 实例
                  alert('Hello ' + this.name + '!')
                  // `event` 是原生 DOM 事件
                  if (event) {
                      alert(event.target.tagName)
                  }
                }
              }
            })
            // 也可以用 JavaScript 直接调用方法
            app.greet() // -> 'Hello Vue.js!'
            </script>


    除了直接绑定到一个方法，也可以用内联 JavaScript 语句
        实例：
            <div id="app">
              <button v-on:click="say('hi')">Say hi</button>
              <button v-on:click="say('what')">Say what</button>
            </div>

            <script>
            new Vue({
              el: '#app',
              methods: {
                say: function (message) {
                  alert(message)
                }
              }
            })
            </script>

    事件修饰符
        Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。

        Vue.js 通过由点 . 表示的指令后缀来调用修饰符。

            .stop - 阻止冒泡
            .prevent - 阻止默认事件
            .capture - 阻止捕获
            .self - 只监听触发该元素的事件
            .once - 只触发一次
            .left - 左键事件
            .right - 右键事件
            .middle - 中间滚轮事件
            <!-- 阻止单击事件冒泡 -->
            <a v-on:click.stop="doThis"></a>
            <!-- 提交事件不再重载页面 -->
            <form v-on:submit.prevent="onSubmit"></form>
            <!-- 修饰符可以串联  -->
            <a v-on:click.stop.prevent="doThat"></a>
            <!-- 只有修饰符 -->
            <form v-on:submit.prevent></form>
            <!-- 添加事件侦听器时使用事件捕获模式 -->
            <div v-on:click.capture="doThis">...</div>
            <!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->
            <div v-on:click.self="doThat">...</div>

            <!-- click 事件只能点击一次，2.1.4版本新增 -->
            <a v-on:click.once="doThis"></a>
    按键修饰符
        Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：

        <!-- 只有在 keyCode 是 13 时调用 vm.submit() -->
        <input v-on:keyup.13="submit">
        记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：

        <!-- 同上 -->
        <input v-on:keyup.enter="submit">
        <!-- 缩写语法 -->
        <input @keyup.enter="submit">
        全部的按键别名：

        .enter
        .tab
        .delete (捕获 "删除" 和 "退格" 键)
        .esc
        .space
        .up
        .down
        .left
        .right
        .ctrl
        .alt
        .shift
        .meta

        实例

            <p><!-- Alt + C -->
            <input @keyup.alt.67="clear">
            <!-- Ctrl + Click -->
            <div @click.ctrl="doSomething">Do something</div>



 12.Vue.js 表单
    用 v-model 指令在表单控件元素上创建双向数据绑定。v-model 会根据控件类型自动选取正确的方法来更新元素。

    输入框
        实例中演示了 input 和 textarea 元素中使用 v-model 实现双向数据绑定：

        <div id="app">
          <p>input 元素：</p>
          <input v-model="message" placeholder="编辑我……">
          <p>消息是: {{ message }}</p>

          <p>textarea 元素：</p>
          <p style="white-space: pre">{{ message2 }}</p>
          <textarea v-model="message2" placeholder="多行文本输入……"></textarea>
        </div>

        <script>
        new Vue({
          el: '#app',
          data: {
            message: 'Runoob',
            message2: '菜鸟教程\r\nhttp://www.runoob.com'
          }
        })
        </script>


    复选框
        复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组：


        以下实例中演示了复选框的双向数据绑定：

            <div id="app">
              <p>单个复选框：</p>
              <input type="checkbox" id="checkbox" v-model="checked">
              <label for="checkbox">{{ checked }}</label>

              <p>多个复选框：</p>
              <input type="checkbox" id="runoob" value="Runoob" v-model="checkedNames">
              <label for="runoob">Runoob</label>
              <input type="checkbox" id="google" value="Google" v-model="checkedNames">
              <label for="google">Google</label>
              <input type="checkbox" id="taobao" value="Taobao" v-model="checkedNames">
              <label for="taobao">taobao</label>
              <br>
              <span>选择的值为: {{ checkedNames }}</span>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                checked : false,
                checkedNames: []
              }
            })
            </script>


    单选按钮
        以下实例中演示了单选按钮的双向数据绑定：


            <div id="app">
              <input type="radio" id="runoob" value="Runoob" v-model="picked">
              <label for="runoob">Runoob</label>
              <br>
              <input type="radio" id="google" value="Google" v-model="picked">
              <label for="google">Google</label>
              <br>
              <span>选中值为: {{ picked }}</span>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                picked : 'Runoob'
              }
            })
            </script>


    select 列表
        以下实例中演示了下拉列表的双向数据绑定：

            <div id="app">
              <select v-model="selected" name="fruit">
                <option value="">选择一个网站</option>
                <option value="www.runoob.com">Runoob</option>
                <option value="www.google.com">Google</option>
              </select>

              <div id="output">
                  选择的网站是: {{selected}}
              </div>
            </div>

            <script>
            new Vue({
              el: '#app',
              data: {
                selected: ''
              }
            })
            </script>


    修饰符
        .lazy
            在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：

                <!-- 在 "change" 而不是 "input" 事件中更新 -->
                <input v-model.lazy="msg" >
        .number
            如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：

                <input v-model.number="age" type="number">
            这通常很有用，因为在 type="number" 时 HTML 中输入的值也总是会返回字符串类型。

        .trim
            如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：

                <input v-model.trim="msg">